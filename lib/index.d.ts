import { default as compare } from './compare';
import { default as isArray } from './isArray';
import { default as isBlob } from './isBlob';
import { default as isBoolean } from './isBoolean';
import { default as isDate } from './isDate';
import { default as isDecimal } from './isDecimal';
import { default as isEvent } from './isEvent';
import { default as isFile } from './isFile';
import { default as isFunction } from './isFunction';
import { default as isInteger } from './isInteger';
import { default as isJSON } from './isJSON';
import { default as isNaN } from './isNaN';
import { default as isNotEmptyArray } from './isNotEmptyArray';
import { default as isNotEmptyObject } from './isNotEmptyObject';
import { default as isNotEmptyString } from './isNotEmptyString';
import { default as isNull } from './isNull';
import { default as isNumber } from './isNumber';
import { default as isObject } from './isObject';
import { default as isRegExp } from './isRegExp';
import { default as isString } from './isString';
import { default as isUndefined } from './isUndefined';
declare const DataValidator: {
    compare: typeof compare;
    isArray: typeof isArray;
    isBlob: typeof isBlob;
    isBoolean: typeof isBoolean;
    isDate: typeof isDate;
    isDecimal: typeof isDecimal;
    isEvent: typeof isEvent;
    isFile: typeof isFile;
    isFunction: typeof isFunction;
    isInteger: typeof isInteger;
    isJSON: typeof isJSON;
    isNaN: typeof isNaN;
    isNotEmptyArray: typeof isNotEmptyArray;
    isNotEmptyObject: typeof isNotEmptyObject;
    isNotEmptyString: typeof isNotEmptyString;
    isNull: typeof isNull;
    isNumber: typeof isNumber;
    isObject: typeof isObject;
    isRegExp: typeof isRegExp;
    isString: typeof isString;
    isUndefined: typeof isUndefined;
};
export default DataValidator;
export { compare, isArray, isBlob, isBoolean, isDate, isDecimal, isEvent, isFile, isFunction, isInteger, isJSON, isNaN, isNotEmptyArray, isNotEmptyObject, isNotEmptyString, isNull, isNumber, isObject, isRegExp, isString, isUndefined, };
